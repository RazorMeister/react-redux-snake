{"version":3,"sources":["components/Cell.tsx","store/actionCreators.ts","components/Stats.tsx","store/state.ts","helpers/random.ts","components/Board.tsx","store/appReducer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cell","props","snakePoints","useSelector","state","snake","points","snakeHead","head","fruitPos","fruitPosition","fruitType","boardSize","className","classes","some","index","X","Y","push","join","getClasses","move","direction","type","payload","Stats","Direction","FruitType","score","bestScore","getRandomIntInclusive","min","max","Math","ceil","floor","random","randomPoint","withoutPoints","rndArr","i","j","num","includes","length","randomFruit","BLUEBERRY","APPLE","getInitialState","initialState","moveDirection","RIGHT","tail","gameOver","scored","pause","lastMoveDirection","Board","dispatch","useDispatch","handleKeyPress","useCallback","event","keyCode","LEFT","UP","DOWN","useEffect","document","addEventListener","setInterval","tick","Array","from","x","map","rowNumber","onClick","reset","getNewState","pointOffset","newHead","oldHeadX","newPoints","abs","slice","find","point","shift","store","createStore","action","composeWithDevTools","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a4fc9384.chunk.js","sourcesContent":["import {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/state\";\r\n\r\ninterface CellProps {\r\n    X: number,\r\n    Y: number\r\n}\r\n\r\nfunction Cell(props: CellProps) {\r\n    const snakePoints = useSelector((state: RootState) => state.snake.points);\r\n    const snakeHead = useSelector((state: RootState) => state.snake.head);\r\n    const fruitPos = useSelector((state: RootState) => state.fruitPosition);\r\n    const fruitType = useSelector((state: RootState) => state.fruitType);\r\n    const boardSize = useSelector((state: RootState) => state.boardSize)\r\n\r\n    const isSnake = () => snakePoints.some((index: number) => index === props.X + boardSize * props.Y);\r\n    const isSnakeHead = () => snakeHead === props.X + boardSize * props.Y;\r\n    const isFruit = () => fruitPos === props.X + boardSize * props.Y;\r\n\r\n    const getClasses = () => {\r\n        const classes = ['cell--content'];\r\n        if (isSnake()) classes.push('snake');\r\n        if (isSnakeHead()) classes.push('snake--head');\r\n        if (isFruit()) classes.push(fruitType);\r\n\r\n        return classes.join(' ');\r\n    }\r\n\r\n    return (\r\n        <div className={`cell`}>\r\n            <div className={getClasses()}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cell;","import {Direction} from \"./state\";\r\n\r\nexport function move(direction: Direction) {\r\n    return {\r\n        type: \"snake/move\",\r\n        payload: direction\r\n    }\r\n}\r\n\r\nexport function tick(payload: any = null) {\r\n    return {\r\n        type: \"snake/tick\",\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport function reset(payload: any = null) {\r\n    return {\r\n        type: \"snake/reset\",\r\n        payload: payload\r\n    }\r\n}","import {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/state\";\r\n\r\nfunction Stats() {\r\n    const score = useSelector((state: RootState) => state.score);\r\n    const bestScore = useSelector((state: RootState) => state.bestScore);\r\n\r\n    return (\r\n        <div className=\"stats\">\r\n            <h1>Score: { score }</h1>\r\n            <h2>Best score: { bestScore }</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stats;","import { randomPoint } from \"../helpers/random\";\r\n\r\nexport enum Direction {\r\n    RIGHT = 1,\r\n    LEFT = -1,\r\n    UP = 2,\r\n    DOWN = -2\r\n}\r\n\r\nexport interface Snake {\r\n    points: number[],\r\n    head: number,\r\n    tail: number\r\n}\r\n\r\nexport enum FruitType {\r\n    APPLE = 'apple',\r\n    BLUEBERRY = 'blueberry'\r\n}\r\n\r\nexport interface RootState {\r\n    snake: Snake,\r\n    moveDirection: Direction,\r\n    lastMoveDirection: Direction,\r\n    boardSize: number,\r\n    gameOver: boolean,\r\n    score: number,\r\n    bestScore: number,\r\n    fruitPosition: number,\r\n    fruitType: FruitType,\r\n    scored: boolean,\r\n    pause: boolean\r\n}\r\n\r\nexport function getInitialState() {\r\n    const initialState: RootState = {\r\n        boardSize: 20,\r\n        moveDirection: Direction.RIGHT,\r\n        snake: {\r\n            points: [],\r\n            head: 207,\r\n            tail: 205\r\n        },\r\n        gameOver: false,\r\n        score: 0,\r\n        bestScore: 0,\r\n        fruitPosition: randomPoint(20, [205, 206, 207]),\r\n        fruitType: FruitType.APPLE,\r\n        scored: false,\r\n        pause: true,\r\n        lastMoveDirection: Direction.RIGHT\r\n    };\r\n\r\n    initialState.snake.points = [\r\n        205,\r\n        206,\r\n        207,\r\n    ];\r\n\r\n    return initialState;\r\n}","import {FruitType} from \"../store/state\";\r\n\r\nconst getRandomIntInclusive = (min: number, max: number) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function randomPoint(boardSize: number, withoutPoints: number[]) {\r\n    const rndArr = [];\r\n\r\n    for (let i = 0; i < boardSize; i++) {\r\n        for (let j = 0; j < boardSize; j++) {\r\n            const num = i + boardSize * j;\r\n            if (!withoutPoints.includes(num)) {\r\n                rndArr.push(num);\r\n            }\r\n        }\r\n    }\r\n\r\n    return rndArr[getRandomIntInclusive(0, rndArr.length - 1)];\r\n}\r\n\r\nexport function randomFruit(): FruitType {\r\n    const rnd = getRandomIntInclusive(0, 100);\r\n    return rnd < 20 ? FruitType.BLUEBERRY : FruitType.APPLE;\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport Cell from \"./Cell\";\r\nimport {useCallback, useEffect} from \"react\";\r\nimport {move, reset, tick} from \"../store/actionCreators\";\r\nimport Stats from \"./Stats\";\r\nimport {Direction, RootState} from \"../store/state\";\r\n\r\nconst ARROW_RIGHT = 39;\r\nconst ARROW_LEFT = 37;\r\nconst ARROW_UP = 38;\r\nconst ARROW_DOWN = 40;\r\n\r\nfunction Board() {\r\n    const boardSize = useSelector((state: RootState) => state.boardSize);\r\n    const gameOver = useSelector((state: RootState) => state.gameOver);\r\n    const pause = useSelector((state: RootState) => state.pause);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleKeyPress = useCallback((event: any) => {\r\n        switch (event.keyCode) {\r\n            case ARROW_RIGHT:\r\n                dispatch(move(Direction.RIGHT));\r\n                break;\r\n            case ARROW_LEFT:\r\n                dispatch(move(Direction.LEFT));\r\n                break;\r\n            case ARROW_UP:\r\n                dispatch(move(Direction.UP));\r\n                break;\r\n            case ARROW_DOWN:\r\n                dispatch(move(Direction.DOWN));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => document.addEventListener(\"keydown\", handleKeyPress), [handleKeyPress]);\r\n    useEffect((): any => setInterval(() => dispatch(tick()), 150), [dispatch]);\r\n\r\n    const renderRow = (rowNumber: number) => {\r\n        return Array.from({length: boardSize}, (x, i) => i).map(index => {\r\n            return (\r\n                <Cell X={rowNumber} Y={index} key={`${rowNumber}-${index}`}/>\r\n            )\r\n        })\r\n    }\r\n\r\n    const renderCells = () => {\r\n        return Array.from({length: boardSize}, (x, i) => i).map(index => {\r\n          return (\r\n              <div className=\"row\" key={index}>\r\n                  { renderRow(index) }\r\n              </div>\r\n          )\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div className=\"board-wrapper\" >\r\n            <div className=\"board-title\">\r\n                <h1>Redux Snake Game</h1>\r\n                <h4 className={`pause-info ${pause ? \"\" : \"hide\"}`}>Press any arrow to begin</h4>\r\n            </div>\r\n            <div className=\"board\">\r\n                { renderCells() }\r\n            </div>\r\n\r\n            <Stats/>\r\n\r\n            {\r\n                gameOver &&\r\n                <div className=\"game-over-modal\">\r\n                    <div className=\"game-over-modal-content\">\r\n                        <h1>GAME OVER</h1>\r\n                        <button onClick={() => dispatch(reset())}>Play again</button>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import {randomFruit, randomPoint} from \"../helpers/random\";\r\nimport {Direction, FruitType, getInitialState, RootState} from \"./state\";\r\n\r\nexport const initialState: RootState = getInitialState();\r\n\r\nconst getNewState = (state: RootState, direction: any = null) => {\r\n    let pointOffset: number = 0;\r\n\r\n    // Game over\r\n    if (state.gameOver) return state;\r\n\r\n    // Change direction on key press\r\n    if (direction !== null) {\r\n        if (state.moveDirection + direction === 0) return {\r\n            ...state,\r\n            pause: false\r\n        };\r\n\r\n        return {\r\n            ...state,\r\n            pause: false,\r\n            moveDirection: direction\r\n        }\r\n    }\r\n\r\n    // Game paused\r\n    if (state.pause) return state;\r\n\r\n    if (state.moveDirection + state.lastMoveDirection === 0)\r\n        state.moveDirection = state.lastMoveDirection;\r\n\r\n    switch (state.moveDirection) {\r\n        case Direction.RIGHT:\r\n            pointOffset = 1;\r\n            break;\r\n        case Direction.LEFT:\r\n            pointOffset = -1;\r\n            break;\r\n        case Direction.UP:\r\n            pointOffset = -state.boardSize;\r\n            break;\r\n        case Direction.DOWN:\r\n            pointOffset = state.boardSize;\r\n            break;\r\n    }\r\n\r\n    const newHead = state.snake.head + pointOffset;\r\n\r\n    const oldHeadX: number = state.snake.head - (Math.floor(state.snake.head / state.boardSize) * state.boardSize);\r\n    let scored = state.scored;\r\n\r\n    const newPoints = [...state.snake.points];\r\n\r\n    newPoints.push(newHead);\r\n\r\n    // Snake bites wall or himself\r\n    if (\r\n        newHead < 0 // wall up\r\n        || newHead > (state.boardSize - 1) + (state.boardSize - 1) * state.boardSize // wall down\r\n        || (Math.abs(state.moveDirection) === 1 && (\r\n            oldHeadX + pointOffset >= state.boardSize // wall right\r\n            || oldHeadX + pointOffset < 0 // wall left\r\n        ))\r\n        || (newPoints.slice(0, -1).find((point: number) => point === newHead))\r\n    ) {\r\n        return {\r\n            ...state,\r\n            bestScore: state.score > state.bestScore ? state.score : state.bestScore,\r\n            gameOver: true\r\n        }\r\n    }\r\n\r\n    if (!scored)\r\n        newPoints.shift();\r\n\r\n    let score = state.score;\r\n    let fruitPos = state.fruitPosition;\r\n    let fruitType: FruitType = state.fruitType;\r\n\r\n    if (newHead === fruitPos) {\r\n        score += (fruitType === FruitType.BLUEBERRY ? 2 : 1);\r\n        fruitPos = randomPoint(state.boardSize, [fruitPos, ...newPoints, state.snake.tail]);\r\n        fruitType = randomFruit();\r\n        scored = true;\r\n    } else\r\n        scored = false;\r\n\r\n    return {\r\n        ...state,\r\n        score: score,\r\n        fruitPosition: fruitPos,\r\n        fruitType: fruitType,\r\n        scored: scored,\r\n        lastMoveDirection: state.moveDirection,\r\n        snake: {\r\n            points: [...newPoints],\r\n            head: newHead,\r\n            tail: newPoints[0]\r\n        }\r\n    };\r\n}\r\n\r\nexport default function appReducer(state: any = initialState, action: any) {\r\n    switch (action.type) {\r\n        case 'snake/move':\r\n            return getNewState(state, action.payload);\r\n        case 'snake/tick':\r\n            return getNewState(state);\r\n        case 'snake/reset':\r\n            return {\r\n                ...getInitialState(),\r\n                bestScore: state.bestScore\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Provider} from \"react-redux\";\r\nimport Board from \"./components/Board\";\r\nimport {createStore} from \"redux\";\r\nimport appReducer from \"./store/appReducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport {getInitialState} from \"./store/state\";\r\n\r\nconst store = createStore(appReducer, getInitialState(), composeWithDevTools());\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Board/>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}